#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Get command line arguments
const args = process.argv.slice(2);
const reportName = args[0];
const reportDescription = args[1] || 'A new report';

if (!reportName) {
  console.error('Usage: node scripts/create-report.js <report-name> [description]');
  console.error('Example: node scripts/create-report.js sales "Monthly sales report"');
  process.exit(1);
}

// Convert report name to proper case
const className = reportName.charAt(0).toUpperCase() + reportName.slice(1) + 'ReportService';
const fileName = className + '.js';
const templateName = reportName + '.ejs';

// Create the report service file
const serviceContent = `const BaseReportService = require('../BaseReportService');

class ${className} extends BaseReportService {
  constructor() {
    super();
    this.reportName = '${reportDescription}';
    this.templatePath = 'views/${templateName}';
    this.description = '${reportDescription}';
  }

  async fetchData(params) {
    const connection = await this.getConnection();
    
    try {
      // TODO: Implement your database queries here
      // Example:
      // const result = await connection.execute(
      //   \`SELECT * FROM your_table WHERE condition = :param\`,
      //   [params.param]
      // );
      
      // Return mock data for now
      return {
        title: '${reportDescription}',
        data: [],
        summary: {
          total: 0,
          date: new Date().toISOString()
        }
      };
    } finally {
      await connection.close();
    }
  }
}

module.exports = ${className};
`;

// Create the EJS template file
const templateContent = `<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel="stylesheet" href="style.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .summary {
            background-color: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            font-size: 12px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1><%= title %></h1>
        <p>Generated on: <%= summary.date %></p>
    </div>
    
    <div class="summary">
        <h3>Summary</h3>
        <p>Total Records: <%= summary.total %></p>
    </div>
    
    <% if (data && data.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <th>Column 1</th>
                    <th>Column 2</th>
                    <th>Column 3</th>
                </tr>
            </thead>
            <tbody>
                <% data.forEach(function(item) { %>
                    <tr>
                        <td><%= item.column1 || 'N/A' %></td>
                        <td><%= item.column2 || 'N/A' %></td>
                        <td><%= item.column3 || 'N/A' %></td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    <% } else { %>
        <p>No data available for this report.</p>
    <% } %>
    
    <div class="footer">
        <p>Generated by Sheesh Garden Report System</p>
    </div>
</body>
</html>`;

// Create the update script for ReportManager
const updateScript = `
// Add this to services/ReportManager.js in the registerDefaultReports() method:
const ${className} = require('./reports/${fileName}');
this.registerReport('${reportName}', new ${className}());
`;

// Write files
const servicePath = path.join(__dirname, '..', 'services', 'reports', fileName);
const templatePath = path.join(__dirname, '..', 'views', templateName);

try {
  // Create services/reports directory if it doesn't exist
  const servicesDir = path.dirname(servicePath);
  if (!fs.existsSync(servicesDir)) {
    fs.mkdirSync(servicesDir, { recursive: true });
  }

  // Write the service file
  fs.writeFileSync(servicePath, serviceContent);
  console.log(`‚úÖ Created service file: ${servicePath}`);

  // Write the template file
  fs.writeFileSync(templatePath, templateContent);
  console.log(`‚úÖ Created template file: ${templatePath}`);

  console.log('\nüìù Next steps:');
  console.log('1. Add the following to services/ReportManager.js in registerDefaultReports():');
  console.log(updateScript);
  console.log(`\n2. Test your report: GET /api/reports/${reportName}`);
  console.log(`\n3. Preview HTML: GET /api/reports/${reportName}?format=html`);
  console.log(`\n4. Get JSON data: GET /api/reports/${reportName}?format=json`);

} catch (error) {
  console.error('‚ùå Error creating files:', error.message);
  process.exit(1);
} 